------------
The problem:


function editTodo(li:HTMLElement , editBtn:HTMLSpanElement , crosBtn:HTMLSpanElement){
    console.log("targeted" , editBtn)
    console.log('li' , (li!.firstChild?.nodeValue))

    if(li!.firstChild?.nodeValue){

    input.value  = li!.firstChild.nodeValue
    li!.firstChild.nodeValue = ""
    crosBtn.classList.add('hide')
    btn.classList.add('hide')
    btn2.classList.remove('hide')

    btn2.addEventListener('click' , (e)=>{
        li!.firstChild!.nodeValue = input.value
        crossBtn!.classList.remove('hide')
        btn.classList.remove('hide')
        btn2.classList.add('hide')

            input.value = ""

        })
    }

}

-----------

🔍 Problem Recap:
When you clicked the ✏️ edit icon on different todos and then clicked the Save (btn2), the wrong or multiple todos were updated.

🧠 Root Cause in Depth: Closures + Event Listener Accumulation
🔸 1. Each editTodo(li) call added a new click event listener to btn2
When you did this inside editTodo:



btn2.addEventListener('click', () => {
    li.firstChild!.nodeValue = input.value;
});



You were saying:

“Hey browser, when btn2 is clicked, run this anonymous function, which updates this specific li.”

But each time you edited a different <li>, a new function was created and attached to the same button. And that function closed over
 (i.e., remembered) the specific li that was passed in that call.



 2. Closures = Captured State
In JavaScript (and TypeScript), when you create a function inside another function, that function remembers
 all the variables in its outer scope — even after the outer function has finished running.

So every time you clicked a different edit button:

A new function was created.

That function remembered the old li from the previous edit.

That function stayed attached to btn2.

So clicking the Save button fired:
✅ the new one
🚨 and all the old ones too — leading to multiple or wrong updates.



3. Why You Didn't See It Immediately
If you:

Only clicked one edit button

Then clicked Save

👉 It worked fine. Only one listener existed.

But once you did:

Edit First Todo ➝ btn2.addEventListener(...) added (remembering first li)

Edit Second Todo ➝ another btn2.addEventListener(...) added (remembering second li)

🧨 Now btn2 has 2 listeners.
So when you click Save:

Listener 1 changes first li

Listener 2 changes second li

🎯 You only meant to update the second, but both get updated — or worse, one gets blanked, the other gets overridden.